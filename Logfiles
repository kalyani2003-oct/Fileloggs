import re
import csv
from collections import defaultdict

def parse_log_file(filename):
    """Parse the log file and extract IPs, endpoints, and status codes."""
    parsed_logs = []
    with open(filename, 'r') as file:
        for line in file:
            ip_match = re.search(r'^(\d+\.\d+\.\d+\.\d+)', line)
            endpoint_match = re.search(r'"(?:GET|POST) (\S+)', line)
            status_code_match = re.search(r'"[^"]+" (\d+)', line)

            if ip_match and endpoint_match and status_code_match:
                ip_address = ip_match.group(1)
                endpoint = endpoint_match.group(1)
                status_code = status_code_match.group(1)
                parsed_logs.append({
                    'ip_address': ip_address,
                    'endpoint': endpoint,
                    'status_code': status_code
                })
    return parsed_logs

def count_requests_by_ip(parsed_logs):
    """Count the number of requests made by each IP address."""
    ip_counts = defaultdict(int)
    for log in parsed_logs:
        ip_counts[log['ip_address']] += 1
    return sorted(ip_counts.items(), key=lambda x: x[1], reverse=True)

def find_most_accessed_endpoint(parsed_logs):
    """Identify the endpoint accessed the highest number of times."""
    endpoint_counts = defaultdict(int)
    for log in parsed_logs:
        endpoint_counts[log['endpoint']] += 1
    most_frequent_endpoint = max(endpoint_counts, key=endpoint_counts.get)
    return most_frequent_endpoint, endpoint_counts[most_frequent_endpoint]

def detect_suspicious_activity(parsed_logs, threshold=10):
    """Detect IPs with failed login attempts exceeding the threshold."""
    suspicious_ips = defaultdict(int)
    for log in parsed_logs:
        if log['status_code'] == '401':  # Failed login attempts
            suspicious_ips[log['ip_address']] += 1
    return {ip: count for ip, count in suspicious_ips.items() if count >= threshold}

def save_results_to_csv(ip_counts, most_accessed_endpoint, suspicious_ips):
    """Save the results to a CSV file."""
    with open('log_analysis_results.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)

        # Write requests per IP
        writer.writerow(['IP Address', 'Request Count'])
        writer.writerows(ip_counts)

        # Write most accessed endpoint
        writer.writerow([])
        writer.writerow(['Endpoint', 'Access Count'])
        writer.writerow([most_accessed_endpoint[0], most_accessed_endpoint[1]])

        # Write suspicious activity
        writer.writerow([])
        writer.writerow(['IP Address', 'Failed Login Count'])
        writer.writerows(suspicious_ips.items())

def main():
    log_file = 'sample.log'
    parsed_logs = parse_log_file(log_file)

    # Count requests per IP
    ip_counts = count_requests_by_ip(parsed_logs)
    print("Requests per IP Address:")
    for ip, count in ip_counts:
        print(f"{ip:20} {count}")

    # Find the most accessed endpoint
    most_accessed_endpoint = find_most_accessed_endpoint(parsed_logs)
    print("\nMost Frequently Accessed Endpoint:")
    print(f"{most_accessed_endpoint[0]} (Accessed {most_accessed_endpoint[1]} times)")

    # Detect suspicious activity with a lower threshold (5 for testing)
    suspicious_ips = detect_suspicious_activity(parsed_logs, threshold=5)
    print("\nSuspicious Activity Detected:")
    if suspicious_ips:
        for ip, count in suspicious_ips.items():
            print(f"{ip:20} {count} ")
    else:
        print("No suspicious activity detected.")

    # Save results to CSV
    save_results_to_csv(ip_counts, most_accessed_endpoint, suspicious_ips)

if __name__ == '__main__':
    main()
